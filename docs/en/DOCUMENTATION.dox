/* **************************   DOCUMENTATION.dox   ************************** *
 * --------------------------------------------------------------------------- *
 *                                                                             *
 * Copyright © 2021-2022 Kalynovsky Valentin. All rights reserved.             *
 *                                                                             *
 * Licensed under the Apache License, Version 2.0 (the "License");             *
 * you may not use this file except in compliance with the License.            *
 * You may obtain a copy of the License at                                     *
 *                                                                             *
 *     http://www.apache.org/licenses/LICENSE-2.0                              *
 *                                                                             *
 * Unless required by applicable law or agreed to in writing, software         *
 * distributed under the License is distributed on an "AS IS" BASIS,           *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
 * See the License for the specific language governing permissions and         *
 * limitations under the License.                                              *
 *                                                                             *
 * --------------------------------------------------------------------------- *
 * *************************************************************************** *
 */

/*!
  \namespace ALGOR
  \brief The global namespace of the entire project
  \details Intended for storage of all implemented functionality of the project.
  \note Better not to use with std or conflicts may occur.
  \since v0.1.2.0 commit 2fa93b

  \author Kalynovsky Valentin
  \version 1.0.0.0
  \copyright Copyright © 2021-2022 Kalynovsky Valentin. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License")

  \todo Implement the ALGOR_MATRIX section
  \todo Implement the ALGOR_HEAP section
  \todo Implement the ALGOR_LIST section

  \example sort_global.cpp
  \example sort_test.cpp
  \example Algor_core.cpp
  \example Algor_printer.cpp
  \example Algor_exception.cpp
  \example Algor_random.cpp
  \example Algor_ArrayProcessing.cpp
  \example Algor_ArrayData.cpp
  \example Algor_ArraySort.cpp
 */

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                  ALGOR_CORE                                 *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

	/*!
	   \typedef ALGOR::byte1_t
	   \brief Alias ​​for char <i>(1 byte)</i>
	   \details Usually used to specify the term type. Can store a number from
	   <b>0</b> to <b>255</b>, or from <b>-128</b> to <b>+127</b>.
	   \since v0.1.3.0 commit b50b4a
	   \attention If this type is indeed used for strings, then do not forget
	   to specify "*" (pointer) in front of the name of the string name, since
	   this type does not completely replace char with string. It's just a
	   normal alias.
	 */
	 
	/*!
	   \typedef ALGOR::byte2_t
	   \brief Alias ​​for short <i>(2 bytes)</i>.
	   \details It is usually used when storing short numbers from <b>0</b>
	   to <b>65'535</b>, or from <b>-32'768</b> to <b>+32'767</b>.
	   \since v0.1.3.0 commit b50b4a
	 */

	/*!
	   \typedef ALGOR::byte4_t
	   \brief Alias ​​for long <i>(4 bytes)</i>.
	   \details Usually used when storing numbers. Can store from <b>0</b>
	   to <b>4'294'967'295</b>, or from <b>-2'147'483'648</b>
	   to <b>+2'147'483'647</b>.
	   \since v0.1.3.0 commit b50b4a
	   \note It can also fully replace the int type, as it is also designed
	   for 4 bytes. But if you run the program on a computer with an intel
	   i386 processor or earlier, only 2 bytes will be allocated under int
	   and on those processors int is an alias for short. Due to such a vague
	   concept of the int type, it is not used anywhere in the library, but
	   clear types such as short or long are used.
	 */

	/*!
	   \typedef ALGOR::byte8_t
	   \brief Alias ​​for long long <i>(8 bytes)</i>.
	   \details Is an extension of the long type by two times and is
	   calculated for numbers from <b>0</b>
	   to <b>18'446'744'073'709'551'615</b>,
	   or from <b>-9'223'372'036'854'775'808</b>
	   to <b>+9'223'372'036'854'775'807</b>.
	   \since v0.1.3.0 commit b50b4a
	 */

	/*!
	   \typedef ALGOR::sbit8_t
	   \brief Alias ​​for signed char <i>(1 byte)</i>.
	   \details Similar to ordinary char, but can take values ​​only from
	   <b>-128</b> to <b>+127</b>.
	   \since v0.1.0.0 commit 0d3195
	 */

	/*!
	   \typedef ALGOR::sbit16_t
	   \brief Alias ​​for signed short <i>(2 bytes)</i>.
	   \details Similar to the usual short, but can take values ​​only from
	   <b>-32'768</b> to <b>+32'767</b>.
	   \since v0.1.0.0 commit 0d3195
	 */

	/*!
	   \typedef ALGOR::sbit32_t
	   \brief Alias ​​for signed long <i>(4 bytes)</i>.
	   \details Similar to regular long, but can take values ​​only from
	   <b>-2'147'483'648</b> to <b>+2'147'483'647</b>.
	   \since v0.1.0.0 commit 0d3195
	 */

	/*!
	   \typedef ALGOR::sbit64_t
	   \brief Alias ​​for signed long long <i>(8 bytes)</i>.
	   \details Similar to the usual long long, but can take values ​​only from
	   <b>-9'223'372'036'854'775'808</b> to <b>+9'223'372'036'854'775'807</b>.
	   \since v0.1.0.0 commit 0d3195
	 */

	/*!
	   \typedef ALGOR::ubit8_t
	   \brief Alias ​​for unsigned char <i>(1 byte)</i>.
	   \details Similar to ordinary char and unlike signed char, it can take
	   values ​​only from <b>0</b> to <b>255</b>.
	   \since v0.1.0.0 commit 0d3195
	 */

	/*!
	   \typedef ALGOR::ubit16_t
	   \brief Alias ​​for unsigned short <i>(2 bytes)</i>.
	   \details Similar to the usual short and unlike the signed short, it can
	   take values ​​only from <b>0</b> to <b>65'535</b>.
	   \since v0.1.0.0 commit 0d3195
	 */

	/*!
	   \typedef ALGOR::ubit32_t
	   \brief Alias ​​for unsigned long <i>(4 bytes)</i>.
	   \details Similarly to the usual long and unlike the signed long, it can
	   take values ​​only from <b>0</b> to <b>4'294'967'295</b>.
	   \since v0.1.0.0 commit 0d3195
	 */

	/*!
	   \typedef ALGOR::ubit64_t
	   \brief Alias ​​for unsigned long long <i>(8 bytes)</i>.
	   \details Similarly to the usual long long and unlike signed long long can
	   take values ​​only from <b>0</b> to <b>18'446'744'073'709'551'615</b>.
	   \since v0.1.0.0 commit 0d3195
	 */

	/*!
	   \typedef ALGOR::fbit32_t
	   \brief Alias ​​for float <i>(4 bytes)</i>.
	   \details Unlike all previous types that can only store integers, the
	   <i>float</i> can store floating-point numbers. You can write both positive
	   and negative numbers in the cell. possible range of stored numbers is
	   from <b>+/-3.4E-38</b> to <b>3.4E+38</b>.
	   \since v0.1.2.0 commit 1981d6
	 */

	/*!
	   \typedef ALGOR::fbit64_t
	   \brief Alias ​​for double <i>(8 bytes)</i>.
	   \details Extends the <i>float</i>, doubling the precision and size.
	   Possible range of stored numbers is from <b>+/-1.7E-308</b> to
	   <b>1.7E+308</b>.
	   \since v0.1.2.0 commit 1981d6
	 */

	/*!
	   \typedef ALGOR::fbit128_t
	   \brief Alias ​​for long double <i>(16 bytes)</i>.
	   \details Extends the type <i>double</i>, doubling the precision and size. 
	   \since v0.1.3.0 commit b6349a
	 */

	/*!
	   \typedef ALGOR::asize_t
	   \brief Alias ​​for defining the <i>"array size"</i>.
	   \details Usually, this type is used when you need to specify the size of
	   an array or a position in an array. Since numbering starts at 0 and there
	   are no negative array sizes or position numbers, it is possible to cast
	   the type from <i>int</i> to <i>unsigned int</i>. In addition, <b>65'535</b>
	   array cells are not always enough. Sometimes more is needed, for example,
	   a million or a billion. More than a billion does not make sense to create
	   data structures, so the ideal choice among <i>short</i>, <i>long</i> and
	   <i>long long</i> is <i>long</i>. That's why <i>asize_t</i> is an alias to
	   ALGOR::ubit32_t.
	   \since v0.1.0.0 commit 89658e
	 */

	/*!
	   \typedef ALGOR::memcell_t
	   \brief An alias for the computed <i>memory cell</i>.
	   \details Used only in the ALGOR::getMemoryCell, as a type of cell that
	   stores the calculated number. 
	   \since v0.1.1.3 commit b4cdc9
	   \attention It is a service type and it is better to use ALGOR::ubit64_t.
	 */

	/*!
	   \fn ALGOR::swap(type_value &, type_value &)
	   \brief Swaps two elements
	   \details The function accepts two values, which must be replaced by
	   places. After the function is executed, the first memory cell will store
	   the second value, and the second - the first. An additional memory cell
	   is used to perform the algorithm.
	   \tparam type_value The type of elements that change places
	   \param[in, out] firstNumber The first item to replace
	   \param[in, out] secondNumber The second element to replace
	   \since v0.0.0.1
	   \test
	   \snippet Algor_core.cpp swap
	 */

	/*!
	   \fn ALGOR::minimum(type_value, type_value)
	   \brief Finds the smallest value of the two given values
	   \details The function takes two values ​​and compares them. If the first
	   number is smaller than the second, the function returns the first number,
	   otherwise - the second.
	   \tparam type_value The type of elements from which the smallest value is selected
	   \param[in] firstNumber The first value per sample
	   \param[in] secondNumber The second value per sample
	   \since v0.1.1.4 commit 090b06
	   \return the smaller value of the two given
	   \sa ALGOR::maximum(type_value, type_value)
	   \test
	   \snippet Algor_core.cpp minimum
	 */

	/*!
	   \fn ALGOR::maximum(type_value, type_value)
	   \brief Finds the largest value of the two given values
	   \details The function takes two values ​​and compares them. If the first
	   number is greater than the second, the function returns the first number,
	   otherwise - the second.
	   \tparam type_value The type of elements from which the largest value is selected
	   \param[in] firstNumber The first value per sample
	   \param[in] secondNumber The second value per sample
	   \since v0.1.1.4 commit 090b06
	   \return the larger value of the two given 
	   \sa ALGOR::minimum(type_value, type_value)
	   \test
	   \snippet Algor_core.cpp maximum
	 */

	/*!
	   \fn ALGOR::getMemoryCell(memcell_t, memcell_t)
	   \brief Returns a random number; analog time(NULL)
	   \details This method allocates memory for 10 memory cells. It is impossible
	   to guess where exactly the system will allocate memory, and it is also
	   impossible to guess which program and which data previously recorded here,
	   so this is the most real generator of random numbers. So far, the
	   generation of arrays has not been perfected, but as a generator of a large
	   number instead of time(NULL), it is quite possible to use it. From ten
	   random numbers, the function calculates the number to be returned.
	   \remark The function can be set to a bit shift. If the function is used
	   instead of time(NULL) and the result is passed to another function that
	   only accepts a four-byte value, you can specify a right shift of 32 bits
	   (4 bytes) and then the function will return the 4 most significant bytes.
	   \param[in] right_adjust Right shift
	   \param[in] left_adjust Left shift
	   \since v0.1.1.3 commit b4cdc9
	   \retval cell - calculated random number
	   \test
	   \snippet Algor_core.cpp mem
	 */

	 /*!
	   \struct ALGOR::Array
	   \brief A structure that simulates an array
	   \details Intended for storing a pointer to a dynamic array and its size.
	   \tparam type_array The type of elements stored in the array
	   \since v0.0.1.0 commit 979bf4
	   \test
	   \snippet Algor_core.cpp array struct
	 */

		/*!
		   \var ALGOR::Array::array
		   \brief Array pointer
		   \since v0.0.1.0 commit 979bf4
		 */

		/*!
		   \var ALGOR::Array::array_size
		   \brief Array size
		   \since v0.0.1.0 commit 979bf4
		 */

	/*!
	   \fn ALGOR::create_struct(const asize_t &, bool)
	   \brief Creates a structure with a pointer to an array
	   \details Saves the size of the array, allocates memory for this same array
	   and returns a pointer to the array structure.
	   \throw ALGOR::EXCEPTION_SET::void_data
	   \tparam type_array The type of elements to be stored in the array
	   \param[in] SIZE The size of the created array
	   \param[in] mem_allocation Logical flag, whether you need to allocate memory for the array
	   \retval Array<type_array>* - a pointer to the created structure
	   \since v0.1.0.0 commit 85698d
	   \remark If you have already allocated memory for the array, then the
	   structure does not need to re-allocate memory. The structure only stores
	   the size of the array and the pointer to this array itself. Therefore, in
	   this case, the <i>mem_allocation</i> to <i>false</i> and after that save
	   the pointer to the array in the structure. In other cases,
	   <i>mem_allocation</i> it is better not to change.
	   \test
	   \snippet Algor_core.cpp create_struct
	 */

	/*!
	   \fn ALGOR::generate_struct(Array<type_array> *&, const sbit64_t &, const sbit64_t &, const ubit64_t, const ubit32_t)
	   \brief Generates random values ​​in an array structure
	   \details Generates values ​​from the specified range in an array structure.
	   If you set <i>denominator</i>, you can get multiples or small values ​​of
	   the data.
	   \throw ALGOR::EXCEPTION_SET::division_by_zero
	   \tparam type_array Specifies what type of numbers will be generated in the
	   array structure
	   \param[in, out] Array The array structure in which to generate the data
	   \param[in] min_limit Minimum possible generated value 
	   \param[in] max_limit Maximum possible generated value 
	   \param[in] seed Generator seed
	   \param[in] denominator Divider for generating <i>float</i> data
	   \since v0.0.0.1
	   \note In case ALGOR::getMemoryCell, you can set the generation family
	   yourself.
	   \test
	   \snippet Algor_core.cpp generate_struct
	 */

	/*!
	   \fn ALGOR::remove_struct(Array<type_array> *&)
	   \brief Deletes an array and a pointer to a structure
	   \details Frees memory from the array stored in the structure and frees the
	   structure itself.
	   \throw ALGOR::EXCEPTION_SET::void_data
	   \tparam type_array The type of elements stored in the array
	   \param[in, out] Array The array to delete
	   \result The pointer to the structure after calling this function will
	   point to <i>nullptr</i>.
	   \since v0.1.0.0 commit 48aa64
	   \test
	   \snippet Algor_core.cpp remove_struct
	 */

	/*!
	   \interface ALGOR::Printer
	   \brief Printer-interface designed to implement information output
	   functionality
	   \details It is an interface consisting of only one virtual method that is
	   designed to output information. Since this project is unique in the sense
	   that no other library (even a standard one) is used and the author writes
	   his own implementation of the algorithms - therefore it is impossible to
	   use the iostream class, which makes the implementation of the printer
	   impossible. The author will need to write his own input-output class from
	   the beginning, and in the conditions of the popularity of graphical
	   interfaces, this is not optimal and relevant. It is better to let the
	   programmer himself implement input-output. In addition, this method is
	   universal: it can be used both in console and graphical programs. If I
	   tried to write an implementation myself, it would be specialized either
	   for the console or for the graphics. This is what prompted me to write the
	   interface, not the class.
	   \warning So that there are no warnings "Potential leak of memory pointed
	   to by 'name' [clang-analyzer-cplusplus.NewDeleteLeaks]" (about a potential
	   memory leak) - you need to create a static <i>printer</i>!
	   \since v0.1.2.0 commit 2fa93b
	   \remark I advise you to use the following implementation for the console
	   program:
	   \test
	   \snippet Algor_printer.cpp printer
	   This class does not store an array, but a pointer to a pointer to an array
	   structure. Therefore, it is enough to pass the pointer to the structure
	   once to the class and that's it. Further, you can simply change the
	   pointers to other structures with other arrays and do not need to
	   re-transfer them to this class. It will itself keep track of which pointer
	   is stored in the structure pointer.
	 */

		/*!
		   \fn ALGOR::Printer::print()
		   \brief Method for outputting information
		   \since v0.1.2.0 commit 2fa93b
		   \test
		   \snippet Algor_printer.cpp print
		 */

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                               ALGOR_EXCEPTION                               *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

	/*!
	  \namespace ALGOR::EXCEPTION_SET
	  \brief A namespace that implements an exception
	  \details The namespace is a set of classes that are used when throwing exceptions,
	  as they store the necessary information about the event that occurred. The
	  ALGOR::EXCEPTION_SET::Exception parent is an exception framework that can be
	  inherited to facilitate exception handling. You can give additional information
	  to already implemented descendant classes, or you can create your own descendant
	  classes.
	  \since v0.1.3.0 commit 2cdff0
	 */

		/*!
		   \class ALGOR::EXCEPTION_SET::Exception
		   \brief A framework class for working with exceptions
		   \details A class that stores the exception data (exception number, details,
		   and explanation). To create an exception object, it is enough to pass the
		   necessary data to the constructor, and to receive information about the
		   exception, it is necessary to intercept it and use the method that returns
		   the necessary data.
		   \since v0.1.1.0 commit c62e85
		   \test
		   \snippet Algor_exception.cpp exception code details explanation class
		 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::Exception::Exception(ubit16_t, const byte1_t *, const byte1_t *)
			   \brief Extended exception class constructor
			   \details A constructor that accepts an extended amount of data, namely
			   the exception code, exception details, and an explanation of the details,
			   which is not always necessary.
			   \param[in] CODE Exception code
			   \param[in] DETAILS Exception details
			   \param[in] EXPLANATION Exception explanation
			   \since v0.1.3.0 commit 2c6408
			   \remark This constructor is extensible in that it allows inherited
			   classes to provide an exception explanation when needed, making this
			   class more versatile.
			   \test
			   \snippet Algor_exception.cpp exception code details explanation
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::Exception::Exception(ubit16_t, const byte1_t *)
			   \brief Standard exception class constructor
			   \details A constructor that takes a base amount of exception data. The
			   error number and details are usually sufficient.
			   \param[in] CODE Exception code
			   \param[in] DETAILS Exception details
			   \since v0.1.1.0 commit c62e85
			   \test
			   \snippet Algor_exception.cpp exception code details
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::Exception::Exception(ubit16_t)
			   \brief Abbreviated exception class code constructor
			   \details A constructor that accepts a reduced amount of exception data.
			   The only data stored in an exception object is the exception number.
			   \param[in] CODE Exception code
			   \since v0.1.1.0 commit c62e85
			   \test
			   \snippet Algor_exception.cpp exception code
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::Exception::Exception(const byte1_t *)
			   \brief Abbreviated verbose exception class constructor
			   \details A constructor that accepts a reduced amount of exception data.
			   The only data stored in an exception object is the details of the
			   exception.
			   \param[in] DETAILS Exception details
			   \since v0.1.1.0 commit c62e85
			   \test
			   \snippet Algor_exception.cpp exception details
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::Exception::code()
			   \brief A method that reports the exception number
			   \details Returns the exception number stored in the object.
			   \since v0.1.1.0 commit c62e85
			   \retval CODE - exception number
			   \test
			   \snippet Algor_exception.cpp exception catch code
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::Exception::what()
			   \brief A method that reports the exception details
			   \details Returns the exception details stored in the object.
			   \since v0.1.1.0 commit c62e85
			   \retval DETAILS - exception details
			   \test
			   \snippet Algor_exception.cpp exception catch details
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::Exception::why()
			   \brief A method that provides an exception explanation
			   \details Returns the explanation of the exception stored in the object.
			   \since v0.1.3.0 commit 2c6408
			   \retval EXPLANATION - exception explanation
			   \test
			   \snippet Algor_exception.cpp exception catch explanation
			 */

			/*!
			   \var ALGOR::EXCEPTION_SET::Exception::CODE
			   \brief Exception number
			   \since v0.1.1.0 commit c62e85
			 */

			/*!
			   \var ALGOR::EXCEPTION_SET::Exception::DETAILS
			   \brief Exception details
			   \since v0.1.1.0 commit c62e85
			 */

			/*!
			   \var ALGOR::EXCEPTION_SET::Exception::EXPLANATION
			   \brief Exception explanation
			   \since v0.1.3.0 commit 2c6408
			 */

		/*!
		   \var ALGOR::EXCEPTION_SET::excep55
		   \brief Message for memory_overflow
		   \since v0.1.3.0 commit d66e53
		   \par Message text
		   <i>"The memory cell that stores the size of the data volume can no longer
		   store more. This error can occur in cases when a larger value is required
		   to be written to the cell that can store the variable 0xffffffff, i.e. more
		   than 4 bytes, since the data size storage cell occupies 4 bytes"</i>
		 */

		/*!
		   \var ALGOR::EXCEPTION_SET::excep101
		   \brief Message for division_by_zero
		   \since v0.1.3.0 commit d66e53
		   \par Message text
		   <i>"A division by zero has occurred - an undefined result of the program
		   execution"</i>
		 */

		/*!
		   \var ALGOR::EXCEPTION_SET::excep254
		   \brief Message for position_failure
		   \since v0.1.3.0 commit d66e53
		   \par Message text
		   <i>"Position failure - position is missing in the array"</i>
		 */

		/*!
		   \var ALGOR::EXCEPTION_SET::excep255
		   \brief Message for value_failure
		   \since v0.1.3.0 commit d66e53
		   \par Message text
		   <i>"Value failure - value is missing in the array"</i>
		 */

		/*!
		   \var ALGOR::EXCEPTION_SET::excep256
		   \brief Message for size_failure
		   \since v0.1.3.0 commit d66e53
		   \par Message text
		   <i>"Size failure - resizing error; for example, it can occur when the sizes
		   match when the array is resized, or the new size is greater/less than limits
		   sizes"</i>
		 */

		/*!
		   \var ALGOR::EXCEPTION_SET::excep400
		   \brief Message for void_data
		   \since v0.1.3.0 commit d66e53
		   \par Message text
		   <i>"Geted empty data structure"</i>
		 */

		/*!
		   \var ALGOR::EXCEPTION_SET::excep404
		   \brief Message for not_found
		   \since v0.1.3.0 commit d66e53
		   \par Message text
		   <i>"Search error - item not found"</i>
		 */

		/*!
		   \class ALGOR::EXCEPTION_SET::memory_overflow
		   \brief Exception class <i>"memory_overflow"</i>
		   \details Basic exception <i>memory_overflow</i>. Uses
		   ALGOR::EXCEPTION_SET::excep55 message and has number <i>55</i>.
		   \since v0.1.1.0 commit bce6b6
		   \remark Some methods when throwing exception <i>55</i> may provide an
		   explanation.
		 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::memory_overflow::memory_overflow()
			   \brief Exception memory_overflow
			   \details Constructor of an object used as a memory_overflow. The
			   exception code and details are passed to the framework.
			   \since v0.1.1.0 commit bce6b6
			   \test
			   \snippet Algor_exception.cpp exception memory_overflow
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::memory_overflow::memory_overflow(const byte1_t *)
			   \brief Exception memory_overflow with explanation
			   \details Constructor of an object used as a memory_overflow. The
			   exception code, details, and explanation are passed to the framework.
			   \param[in] explanation Explanation of exception details
			   \since v0.1.3.0 commit 2с6408
			   \test
			   \snippet Algor_exception.cpp exception memory_overflow explanation
			 */

		/*!
		   \class ALGOR::EXCEPTION_SET::division_by_zero
		   \brief Exception class <i>"division_by_zero"</i>
		   \details Basic exception <i>division_by_zero</i>. Uses
		   ALGOR::EXCEPTION_SET::excep101 message and has number <i>101</i>.
		   \since v0.1.2.0 commit d74cc1
		 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::division_by_zero::division_by_zero()
			   \brief Exception division_by_zero
			   \details Object constructor used as an exception to division_by_zero.
			   The exception code and details are passed to the framework. 
			   \since v0.1.2.0 commit d74cc1
			   \test
			   \snippet Algor_exception.cpp exception division_by_zero
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::division_by_zero::division_by_zero(const byte1_t *)
			   \brief Exception division_by_zero with explanation
			   \details Object constructor used as an exception to division_by_zero .
			   The exception code, details, and explanation are passed to the framework.
			   \param[in] explanation Explanation of exception details
			   \since v0.1.3.0 commit 2с6408
			   \test
			   \snippet Algor_exception.cpp exception division_by_zero explanation
			 */

		/*!
		   \class ALGOR::EXCEPTION_SET::position_failure
		   \brief Exception class <i>"position_failure"</i>
		   \details Basic exception <i>position_failure</i>. Uses
		   ALGOR::EXCEPTION_SET::excep254 message and has number <i>254</i>.
		   \since v0.1.1.0 commit 8bbf75
		 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::position_failure::position_failure()
			   \brief Exception position_failure
			   \details Constructor of the object used as the position_failure. The
			   exception code and details are passed to the framework.
			   \since v0.1.1.0 commit 8bbf75
			   \test
			   \snippet Algor_exception.cpp exception position_failure
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::position_failure::position_failure(const byte1_t *)
			   \brief Exception position_failure with explanation
			   \details Constructor of the object used as the position_failure. The
			   exception code, details, and explanation are passed to the framework.
			   \param[in] explanation Explanation of exception details
			   \since v0.1.3.0 commit 2с6408
			   \test
			   \snippet Algor_exception.cpp exception position_failure explanation
			 */

		/*!
		   \class ALGOR::EXCEPTION_SET::value_failure
		   \brief Exception class <i>"value_failure"</i>
		   \details Basic exception <i>value_failure</i>. Uses
		   ALGOR::EXCEPTION_SET::excep255 message and has number <i>255</i>.
		   \since v0.1.1.0 commit 8bbf75
		 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::value_failure::value_failure()
			   \brief Exception value_failure
			   \details Constructor of the object used as the value_failure. The
			   exception code and details are passed to the framework.
			   \since v0.1.1.0 commit 8bbf75
			   \test
			   \snippet Algor_exception.cpp exception value_failure
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::value_failure::value_failure(const byte1_t *)
			   \brief Exception value_failure with explanation
			   \details Constructor of the object used as the value_failure. The
			   exception code, details, and explanation are passed to the framework.
			   \param[in] explanation Explanation of exception details
			   \since v0.1.3.0 commit 2с6408
			   \test
			   \snippet Algor_exception.cpp exception value_failure explanation
			 */

		/*!
		   \class ALGOR::EXCEPTION_SET::size_failure
		   \brief Exception class <i>"size_failure"</i>
		   \details Basic exception <i>size_failure</i>. Uses
		   ALGOR::EXCEPTION_SET::excep256 message and has number <i>256</i>.
		   \since v0.1.3.0 commit 2c6408
		 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::size_failure::size_failure()
			   \brief Exception size_failure
			   \details Constructor of the object used as the size_failure. The
			   exception code and details are passed to the framework.
			   \since v0.1.3.0 commit 2c6408
			   \test
			   \snippet Algor_exception.cpp exception size_failure
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::size_failure::size_failure(const byte1_t *)
			   \brief Exception size_failure with explanation
			   \details Constructor of the object used as the size_failure. The
			   exception code, details, and explanation are passed to the framework.
			   \param[in] explanation Explanation of exception details
			   \since v0.1.3.0 commit 2с6408
			   \test
			   \snippet Algor_exception.cpp exception size_failure explanation
			 */

		/*!
		   \class ALGOR::EXCEPTION_SET::void_data
		   \brief Exception class <i>"void_data"</i>
		   \details Basic exception <i>void_data</i>. Uses
		   ALGOR::EXCEPTION_SET::excep400 message and has number <i>400</i>.
		   \since v0.1.1.0 commit c62e85
		 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::void_data::void_data()
			   \brief Exception void_data
			   \details Object constructor used as an exception void_data. The
			   exception code and details are passed to the framework.
			   \since v0.1.1.0 commit c62e85
			   \test
			   \snippet Algor_exception.cpp exception void_data
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::void_data::void_data(const byte1_t *)
			   \brief Exception void_data with explanation
			   \details Object constructor used as an exception void_data. The
			   exception code, details, and explanation are passed to the framework.
			   \param[in] explanation Explanation of exception details
			   \since v0.1.3.0 commit 2с6408
			   \test
			   \snippet Algor_exception.cpp exception void_data explanation
			 */

		/*!
		   \class ALGOR::EXCEPTION_SET::not_found
		   \brief Exception class <i>"not_found"</i>
		   \details Basic exception <i>not_found</i>. Uses
		   ALGOR::EXCEPTION_SET::excep404 message and has number <i>404</i>.
		   \since v0.1.1.0 commit c62e85
		 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::not_found::not_found()
			   \brief Exception not_found
			   \details Constructor of the object used as the not_found. The
			   exception code and details are passed to the framework.
			   \since v0.1.1.0 commit c62e85
			   \test
			   \snippet Algor_exception.cpp exception not_found
			 */

			/*!
			   \fn ALGOR::EXCEPTION_SET::not_found::not_found(const byte1_t *)
			   \brief Exception not_found with explanation
			   \details Constructor of the object used as the not_found. The exception
			   code, details, and explanation are passed to the framework.
			   \param[in] explanation Explanation of exception details
			   \since v0.1.3.0 commit 2с6408
			   \test
			   \snippet Algor_exception.cpp exception not_found explanation
			 */

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                 ALGOR_RANDOM                                *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

	/*!
	  \namespace ALGOR::RANDOM
	  \brief A namespace that implements PRNG
	  \details The namespace is a set of classes used in Pseudorandom Number Generation
	  (PRNG). Classes are implementations of mathematical models. Commonly used when
	  generating data structures such as arrays etc.
	  \since v0.1.3.0 commit d66e53
	 */

		/*!
		   \class ALGOR::RANDOM::LCM
		   \brief PRNG Linear Congruent Method
		   \details One of the simplest PRNG. It works according to the principle of
		   calculating the next number. It is represented by the formula
		   \f[x_n = (a * x_{n-1} + c)mod(m)\f], where \f$a, c, m\f$ - constant
		   coefficients.
		   \since v0.1.3.0 commit ca0704
		   \remark LCM = LinearCongruentMethod
		   \par Resources
		   Source: https://en.wikipedia.org/wiki/Linear_congruential_generator\n
		   Paragraph: Parameters in common use\n
		   Table row: MMIX by Donald Knuth\n
		   \sa ALGOR::RANDOM::RC4
		   \sa ALGOR::RANDOM::MersenneTwister
		   \test
		   \snippet Algor_random.cpp LCM class
		 */

			/*!
			   \fn ALGOR::RANDOM::LCM::LCM(memcell_t)
			   \brief Constructor of the class that accepts the seed
			   \details A constructor that accepts a seed of PRNG that is the first
			   number of the sequence to be generated (\f$x_0\f$). It is an analogue
			   of the standard function <i>srand()</i>.
			   \param[in] seed Generation seed
			   \since v0.1.3.0 commit ca0704
			   \test
			   \snippet Algor_random.cpp LCM srand
			 */

			/*!
			   \fn ALGOR::RANDOM::LCM::rand()
			   \brief Pseudorandom number generation method
			   \details The algorithm that generates (<i>calculates</i>) the next
			   sequence number.
			   \since v0.1.3.0 commit ca0704
			   \retval seed - the next number in the sequence \f$x_n\f$
			   \test
			   \snippet Algor_random.cpp LCM rand
			 */

			/*!
			   \var ALGOR::RANDOM::LCM::a
			   \brief The first constant number \f$a\f$
			   \details Constant \f$a\f$ = 6'364'136'223'846'793'005.
			   \since v0.1.3.0 commit ca0704
			 */

			/*!
			   \var ALGOR::RANDOM::LCM::c
			   \brief The second constant number \f$c\f$
			   \details Constant \f$c\f$ = 1'442'695'040'888'963'407.
			   \since v0.1.3.0 commit ca0704
			 */

			/*!
			   \var ALGOR::RANDOM::LCM::m
			   \brief The third constant number \f$m\f$
			   \details Constant \f$m\f$ = 18'446'744'073'709'551'615.
			   \since v0.1.3.0 commit ca0704
			 */

			/*!
			   \var ALGOR::RANDOM::LCM::seed
			   \brief Sequence seed \f$x_0\f$
			   \details Number specifying the beginning of the sequence to be generated.
			   \since v0.1.3.0 commit ca0704
			 */

		/*!
		   \class ALGOR::RANDOM::RC4
		   \brief A simple crypto-resistant generator
		   \details RC4 is a stream cipher developed by Ron Rivest in 1987.
		   \since v0.1.0.0 commit 88415c
		   \note Can only generate values ​​in the range 0-255 (1 byte).
		   \deprecated At this stage, the development of this PRNG is frozen. The
		   algorithm is outdated. Over time, its complete removal or complete
		   modernization is possible, why it is not recommended to use it.
		   \par Resources
		   Source: https://www.youtube.com/watch?v=PQlZI-QoM2A\n
		   \sa ALGOR::RANDOM::LCM
		   \sa ALGOR::RANDOM::MersenneTwister
		   \test
		   \snippet Algor_random.cpp RC4 class
		*/

			/*!
			   \fn ALGOR::RANDOM::RC4::crypto_srand(const byte1_t *, byte4_t)
			   \brief Sets the generation key
			   \details Accepts the key and calculates the generation key from it.
			   \param[in] key 	Installable key
			   \param[in] ksize The size of the key
			   \since v0.1.0.0 commit 88415c
			   \test
			   \snippet Algor_random.cpp RC4 srand
			 */

			/*!
			   \fn ALGOR::RANDOM::RC4::crypto_rand(byte1_t *, byte4_t)
			   \brief Generates a value
			   \details Generates an array of output encrypted values ​​that can be
			   used as generated PRNG.
			   \param[out] output Generates an array of output elements
			   \param[in] size The size of the array of output elements
			   \since v0.1.0.0 commit 88415c
			   \test
			   \snippet Algor_random.cpp RC4 rand
			 */

			/*!
			   \var ALGOR::RANDOM::RC4::Sbox
			   \brief Generation key
			   \since v0.1.0.0 commit 88415c
			 */

		/*!
		   \class ALGOR::RANDOM::MersenneTwister
		   \brief A complex PRNG based on the properties of Mersenne's prime numbers
		   \details The Mersenne Twister is an PRNG developed in 1997 by Japanese
		   scientists Makoto Matsumoto and Takuji Nishimura. The Mersenne Twister is
		   based on the properties of Mersenne's prime numbers and provides fast
		   generation of high-quality pseudo-random numbers based on the criterion
		   of randomness.
		   \since v0.1.0.0 commit 88415c
		   \deprecated At this stage, the development of this PRNG is frozen. Even
		   if it is better than Linear PRNG, it has not yet been brought to a
		   debugged state. It is still difficult to use. In the future, it is
		   possible to completely change the signatures of methods in a class. Or
		   its complete removal.
		   \par Resources
		   Source: https://www.agner.org/random/\n
		   \sa ALGOR::RANDOM::LCM
		   \sa ALGOR::RANDOM::RC4
		   \test
		   \snippet Algor_random.cpp MT class
		 */

			/*!
			   \fn ALGOR::RANDOM::MersenneTwister::MersenneTwister(byte4_t)
			   \brief Constructor of the PRNG class Mersenne Twister (sets the seed) 
			   \details Sets the seed and initializes the sequence to be generated.
			   \param[in] seed Generation seed
			   \since v0.1.0.0 commit 88415c
			   \test
			   \snippet Algor_random.cpp MT srand
			 */

			/*!
			   \fn ALGOR::RANDOM::MersenneTwister::RandomInit(byte4_t)
			   \brief Initialization of the PRNG
			   \details It is used when reimplantation of the seed of PRNG.
			   \param[in] seed Generation seed
			   \since v0.1.0.0 commit 88415c
			   \test
			   \snippet Algor_random.cpp MT reinit
			 */

			/*!
			   \fn ALGOR::RANDOM::MersenneTwister::rand()
			   \brief The method of data generation on the entire possible range
			   \details Generates numbers for the entire possible range of the
			   variable. This method has been specifically designed to be compatible
			   with the PRNG testing function.
			   \since v0.1.3.0 commit ca0704
			   \warning This method was written only for the PRNG testing function.
			   Do not use it if you have a limit on the number to be generated. To
			   do this, use the
			   ALGOR::RANDOM::MersenneTwister::IRandom method, which was created
			   specifically for this.
			   \warning Also, if you need to generate a number on the entire range,
			   it is better to use ALGOR::RANDOM::MersenneTwister::BRandom to avoid
			   additional calculations.
			   \deprecated Will be deleted after PRNG testing is complete.
			   \return generated number
			 */

			/*!
			   \fn ALGOR::RANDOM::MersenneTwister::IRandom(byte4_t, byte4_t)
			   \brief The method of generating a number in a given range
			   \details Generates a number in the given range.
			   \param[in] min Minimum range number
			   \param[in] max Maximum range number
			   \since v0.1.0.0 commit 88415c
			   \return generated number in the given range
			   \test
			   \snippet Algor_random.cpp MT rand int
			 */

			/*!
			   \fn ALGOR::RANDOM::MersenneTwister::IRandomX(byte4_t, byte4_t)
			   \brief A more accurate method is the generation of a number in a
			   given range
			   \details Is an analogue of the ALGOR::RANDOM::MersenneTwister::IRandom,
			   which generates a number using a more complex algorithm, and the
			   number itself is more accurate.
			   \param[in] min Minimum range number
			   \param[in] max Maximum range number
			   \since v0.1.0.0 commit 88415c
			   \return exact generated number in the given range
			   \test
			   \snippet Algor_random.cpp MT rand int extend
			 */

			/*!
			   \fn ALGOR::RANDOM::MersenneTwister::Random()
			   \brief Method for generating a floating point number
			   \details Generates floating point numbers.
			   \since v0.1.0.0 commit 88415c
			   \warning This method generates numbers between 0 and 1, meaning all
			   generated numbers will be less than one.
			   \return floating point number
			   \test
			   \snippet Algor_random.cpp MT rand double
			 */

			/*!
			   \fn ALGOR::RANDOM::MersenneTwister::BRandom()
			   \brief Random bit generation method
			   \details Generates random bits in a four-byte variable, allowing the
			   generation of a 32-bit number over the entire range.
			   \since v0.1.0.0 commit 88415c
			   \note Can serve as an analogue of the method
			   ALGOR::RANDOM::MersenneTwister::rand,
			   but that method is an extension of
			   ALGOR::RANDOM::MersenneTwister::IRandom
			   for the PRNG test function, which causes additional calculations and
			   resource consumption. If you need to immediately generate some number
			   on the entire range, then it is better to choose this method.
			   \return generated number over the entire range
			   \test
			   \snippet Algor_random.cpp MT rand bits
			 */

			/*!
			   \fn ALGOR::RANDOM::MersenneTwister::Init0(byte4_t)
			   \brief Basic initialization procedure
			   \param[in] seed Generation seed
			   \since v0.1.0.0 commit 88415c
			 */

			/*!
			   \var ALGOR::RANDOM::MersenneTwister::mersenne_twister
			   \brief State vector
			   \since v0.1.0.0 commit 88415c
			 */

			/*!
			   \var ALGOR::RANDOM::MersenneTwister::mersenne_twister_index
			   \brief Index in state vector
			   (ALGOR::RANDOM::MersenneTwister::mersenne_twister)
			   \since v0.1.0.0 commit 88415c
			 */

			/*!
			   \var ALGOR::RANDOM::MersenneTwister::LastInterval
			   \brief Length of last interval for
			   ALGOR::RANDOM::MersenneTwister::IRandomX
			   \since v0.1.0.0 commit 88415c
			 */

			/*!
			   \var ALGOR::RANDOM::MersenneTwister::RejectionLimit
			   \brief Deviation limit used by
			   ALGOR::RANDOM::MersenneTwister::IRandomX
			   \since v0.1.0.0 commit 88415c
			 */

		/*!
		   \fn ALGOR::RANDOM::test_random_on_Pearsons_coefficient(ubit32_t, ubit32_t)
		   \brief The function of testing PRNG for uniformity
		   \details Tests PRNG for uniformity of number generation using Pearson's
		   coefficient of concordance.
		   \tparam The class of the PRNG algorithm to be tested.
		   \param[in] left_limit Minimum number of generation range when testing
		   \param[in] right_limit The maximum number of generation ranges during
		   testing
		   \since v0.1.3.0 commit ca0704
		   \warning PRNG ALGOR::RANDOM::RC4 cannot yet be tested, as it is not
		   prepared for use by this test function, and the function itself is not
		   compiled for this algorithm.
		   \return Pearson's coefficient of agreement
		   \test
		   \snippet Algor_random.cpp random test
		   \remark As you can see from the example, ALGOR::RANDOM::LCM generates
		   numbers more evenly. However, that doesn't mean it's better... As already
		   mentioned, Marsen's PRNG Vortex is faster <del>(although it uses a lot
		   more operations and calculations)</del> and better quality. And the
		   obtained results are just a coincidence. Sometimes ALGOR::RANDOM::LCM, and
		   sometimes ALGOR::RANDOM::MersenneTwister, so it can be concluded that they
		   generate numbers of the same quality <del>(or maybe just well-chosen
		   coefficients for ALGOR::RANDOM::LCM)</del>. For generation function of the
		   ALGOR::generate_struct array structure ALGOR::Array was still chosen
		   ALGOR:RANDOM::LCM, since it is much easier to implement and understand,
		   and works as well as ALGOR::RANDOM::MersenneTwister.
		 */

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                 ALGOR_MATRIX                                *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
  \todo Зробити розділ ALGOR_MATRIX
 */

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                  ALGOR_HEAP                                 *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
  \todo Зробити розділ ALGOR_HEAP
 */

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                  ALGOR_LIST                                 *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
  \todo Зробити розділ ALGOR_LIST
 */