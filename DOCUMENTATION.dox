/* **************************   DOCUMENTATION.dox   ************************** *
 * --------------------------------------------------------------------------- *
 *                                                                             *
 * Copyright Â© 2022 Kalynovsky Valentin. All rights reserved.                  *
 *                                                                             *
 * Licensed under the Apache License, Version 2.0 (the "License");             *
 * you may not use this file except in compliance with the License.            *
 * You may obtain a copy of the License at                                     *
 *                                                                             *
 *     http://www.apache.org/licenses/LICENSE-2.0                              *
 *                                                                             *
 * Unless required by applicable law or agreed to in writing, software         *
 * distributed under the License is distributed on an "AS IS" BASIS,           *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
 * See the License for the specific language governing permissions and         *
 * limitations under the License.                                              *
 *                                                                             *
 * --------------------------------------------------------------------------- *
 * *************************************************************************** *

/*!
\defgroup CHANGELOG CHANGELOG
\file CHANGELOG.md

*/

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                  ALGOR_CORE                                 *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
\fn void swap(type_array &firstNumber, type_array &secondNumber)
\brief Swaps two elements
\tparam type_array The type of elements that the array stores. For example int or float
\param[in, out] firstNumber First item to replace
\param[in, out] secondNumber Second item to replace
*/
/*!
\fn type_array minimum(const type_array *Array, const asize_t &array_size)
\brief Finds the minimum element in an array by iterating over
\tparam type_array The type of elements that the array stores. For example int or float
\param[in] Array The array in which to look for the minimum element
\param[in] array_size The size of this very array
\throw void_data Transferred an empty array
\return type_array
*/
/*!
\fn type_array maximum(const type_array *Array, const asize_t &array_size)
\brief Finds the maximum element in an array by iterating over
\tparam type_array The type of elements that the array stores. For example int or float
\param[in] Array The array in which to look for the maximum element
\param[in] array_size The size of this very array
\throw void_data Transferred an empty array
\return type_array
*/
/*!
\fn void addElement(type_array *&Array, asize_t &array_size, const type_array &value, const unsigned int position)
\brief Adds a specific value to an array at a specified position
\tparam type_array The type of elements that the array stores. For example int or float
\param[in, out] Array The array to which the element is added
\param[in] array_size The size of this very array
\param[in] value The element to add to the array
\param[in] position The position at which the element will be added
*/
/*!
\fn void subtractElement(type_array *&Array, asize_t &array_size, const unsigned int position)
\brief Removes the specified position from the array
\tparam type_array The type of elements that the array stores. For example int or float
\param[in, out] Array The array in which the position will be deleted
\param[in] array_size The size of this very array
\param[in] position The position at which the element will be removed
*/
/*!
\fn void subtractValue(type_array *&Array, asize_t &array_size, const type_array &value)
\brief Removes a specific element from all positions in an array
\tparam type_array The type of elements that the array stores. For example int or float
\param[in, out] Array An array in which all elements that match the given value will be removed
\param[in] array_size The size of this very array
\param[in] value The value to be removed in the entire array
*/
/*!
\fn void copy(type_array *new_array, const type_array *old_array, const unsigned int &size_of_copied, unsigned int position_in_new_array, unsigned int position_in_old_array)
\brief Copies an array
\tparam type_array The type of elements that the array stores. For example int or float
\param[in, out] new_array The array into which the data is copied
\param[in] old_array The array from which to copy
\param[in] size_of_copied A parameter that indicates how many items to copy
\param[in] position_in_new_array The position from which to start writing in the array to which the data is copied
\param[in] position_in_old_array The position from which to start reading from the array, from which the data is copied
*/
/*!
\struct Array
\brief A structure that mimics an array. Designed to store a pointer to a dynamic array and its size
\tparam type_array The type of elements that the array stores. For example int or float
*/
/*!
\fn Array<type_array> *create_struct(const asize_t &SIZE)
\brief Creates a structure with a pointer to an array
\tparam type_array The type of elements that the array stores. For example int or float
\param[in] SIZE The size of the array to be created
\return Array<type_array>* Pointer to array
*/
/*!
\fn void remove_struct(Array<type_array> *&Array)
\brief Removes an array and structure from heap
\tparam type_array The type of elements that the array stores. For example int or float
\param[in] Array The array to be deleted
*/
/*!
\class ArrayBase
\brief The base class, which is organized for working with arrays - memory allocation, storage, deletion
\tparam type_array The type of elements that the array stores. For example int or float
*/
/*!
\fn ArrayBase<type_array>::ArrayBase(Array<type_array> *&Array)
\brief Construct a new ArrayBase<type_array>::ArrayBase object
\details With this creation of an object, both the structure and the object of the class will point to the same array
\tparam type_array The type of elements that the array stores. For example int or float
\param[in] Array Pointer to a structured array
*/
/*!
\fn ArrayBase<type_array>::ArrayBase(const asize_t &SIZE)
\brief Construct a new ArrayBase<type_array>::ArrayBase object
\details With such an object creation, memory will be allocated for a new array, the pointer to which will be stored only in the class object
\tparam type_array The type of elements that the array stores. For example int or float
\param[in] SIZE The size of the array being created
*/
/*!
\fn ArrayBase<type_array>::ArrayBase()
\brief Construct a new ArrayBase<type_array>::ArrayBase object
\details With this creation of an object, no memory will be allocated for the array. The object will be empty
\tparam type_array The type of elements that the array stores. For example int or float
*/

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                               ALGOR_EXCEPTION                               *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
\class Exception
\brief Class for working with exceptions
*/
/*!
\fn Exception::Exception(unsigned int CODE, const char *MESSAGE, const char *DETAILS)
\brief Construct a new Exception::Exception object
\details Takes full detailed information on exclusion
\param CODE Exception encoding
\param MESSAGE Message exception
\param DETAILS Exception details
*/
/*!
\fn Exception::Exception(unsigned int CODE, const char *MESSAGE)
\brief Construct a new Exception::Exception object
\details Accepts basic exception information
\param CODE Exception encoding
\param MESSAGE Message exception
*/
/*!
\fn Exception::Exception(unsigned int CODE)
\brief Construct a new Exception::Exception object
\details Takes cordivity of exception
\param CODE Exception encoding
*/
/*!
\fn Exception::Exception(const char *MESSAGE)
\brief Construct a new Exception::Exception object
\details Accepts an exception message
\param MESSAGE Message exception
*/
/*!
\fn unsigned int Exception::code()
\brief Returns exclusion encoding

\return <unsigned int> - exception encoding
*/
/*!
\fn const char *Exception::what()
\brief Returns an exception message

\return <const char*> - message exception
*/
/*!
\fn const char *Exception::details()
\brief Returns exception details

\return <const char*> - exception details
*/
/*!
\class void_data
\brief void_data exception class
*/
/*!
\fn void_data::void_data()
\brief Construct a new void data::void data object
\details Geted empty data structure
*/
/*!
\class not_found
\brief not_found exception class
*/
/*!
\fn not_found::not_found()
\brief Construct a new not found::not found object
\details Search error - item not found
*/

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                 ALGOR_RANDOM                                *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
\class RC4
\brief Simple crypto-strong generator
\note Taken from the link https://www.youtube.com/watch?v=PQlZI-QoM2A
*/
/*!
int RC4::crypto_entropy()
*/
/*!
\fn void RC4::crypto_srand(const char *key, int ksize)
\brief Set up the key
\param[in] key The key to be installed
\param[in] ksize Key size
*/
/*!
\fn void RC4::crypto_rand(char *output, int size)
\brief Generates a value
\param[out] output Generates an array of elements
\param[in] size Array size
*/
/*!
\class MersenneTwister
\brief Advanced generator based on Marsen primes
\note Source URL: www.agner.org/random
*/
/*!
\fn MersenneTwister::MersenneTwister(int seed)
\brief Construct a new Mersenne Twister::Mersenne Twister object
\details Installs the seed
\param[in] seed Generation seed
*/
/*!
\fn void MersenneTwister::RandomInit(int seed)
\brief Re-seed
\param seed Generation seed
*/
/*!
\fn int MersenneTwister::IRandom(int min, int max)
\brief Output random integer
\param min The minimum value that can be generated
\param max The maximum value that can be generated
\return int
 */
/*!
\fn int MersenneTwister::IRandomX(int min, int max)
\brief Output random integer, exact
\param min The minimum value that can be generated
\param max The maximum value that can be generated
\return int
*/
/*!
\fn double MersenneTwister::Random()
\brief Output random float
\return double
*/
/*!
\fn uint32_t MersenneTwister::BRandom()
\brief Output random bits
\return uint32_t
*/

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                ALGOR_SORTING                                *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
Sorting
*/

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                 ALGOR_ARRAY                                 *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
\class ARRAYDATA
\brief Array processing
\details This is the main class for working with arrays, the tasks of which
         are storing a pointer to an array, the ability to create, delete, modify it,
         calculate characteristics, etc.
\tparam type_array The type of elements that the array stores. For example int or float
*/
/*!
\fn ARRAYDATA<type_array>::ARRAYDATA(Array<type_array> *&Array) 
\brief Construct a new arraydata<type array>::arraydata object
\details With this creation of an object, both the structure and the object of the class will point to the same array
\tparam type_array The type of elements that the array stores. For example int or float
\param[in] Array Pointer to a structured array
*/
/*!
\fn ARRAYDATA<type_array>::ARRAYDATA(const asize_t &SIZE)
\brief Construct a new arraydata<type array>::arraydata object
\details With such an object creation, memory will be allocated for a new array, the pointer to which will be stored only in the class object
\tparam type_array The type of elements that the array stores. For example int or float
\param[in] SIZE The size of the array being created
*/
/*!
\fn ARRAYDATA<type_array>::ARRAYDATA()
\brief Construct a new arraydata<type array>::arraydata object
\details With this creation of an object, no memory will be allocated for the array. The object will be empty
\tparam type_array The type of elements that the array stores. For example int or float
*/
/*!
\fn void ARRAYDATA<type_array>::generatedData(const int &min_limit, const int &max_limit)
\brief A method that fills the entire array with random values
\tparam type_array The type of elements that the array stores. For example int or float
\param min_limit The minimum value that can be generated
\param max_limit The maximum value that can be generated
*/
/*!
\fn void ARRAYDATA<type_array>::setNewData(Array<type_array> *&Array)
\brief A method that replaces the previous array with a new one, freeing memory from the previous one
\tparam type_array The type of elements that the array stores. For example int or float
\param Array An array that will replace the previous one in the object
*/
/*!
\fn void ARRAYDATA<type_array>::setData(Array<type_array> *&Array)
\brief A method that replaces the previous array with a new one without freeing memory from the previous one
\tparam type_array The type of elements that the array stores. For example int or float
\param Array An array that will replace the previous one in the object
*/
/*!
\fn void ARRAYDATA<type_array>::cloneData(Array<type_array> *&CloningArray)
\brief Method that replaces the old array by copying the existing one
\tparam type_array The type of elements that the array stores. For example int or float
\param CloningArray The array to be copied to the object
*/
/*!
\fn void ARRAYDATA<type_array>::cloneData(ARRAYDATA<type_array> *&CloningObject)
\brief A method that replaces an old array by copying an existing one from another object
\tparam type_array The type of elements that the array stores. For example int or float
\param CloningObject The object from which to copy the array
*/
/*!
\fn void ARRAYDATA<type_array>::getData(Array<type_array> *&DATA)
\brief Gives a pointer to an array
\tparam type_array The type of elements that the array stores. For example int or float
\param DATA A pointer that will point to the array that is stored in the object
*/
/*!
\fn Array<type_array> *ARRAYDATA<type_array>::getData()
\brief Returns a pointer to an array
\tparam type_array The type of elements that the array stores. For example int or float
\return Array<type_array>*
*/
/*!
\fn void ARRAYDATA<type_array>::reset()
\brief The method removes the old array, creates a new one with the same characteristics
       (size, minimum and maximum limits) and fills it (unlike respawn (), which does
       not generate elements).
\tparam type_array The type of elements that the array stores. For example int or float
*/
/*!
\fn void ARRAYDATA<type_array>::resize(const asize_t &NEW_SIZE, const type_array &setElement)
\brief Method that resizes the array
\tparam type_array The type of elements that the array stores. For example int or float
\param NEW_SIZE New array size
\param setElement The value with which new cells of the array are filled
\warning In the case of increasing the size of the array after copying,
         the new cells remain empty and store "garbage" in themselves.
         Sometimes, by accident, a programmer can try to get data without
         specifying it, as a result of which, in the best case, an incorrect
         result will simply be given, and in the worst case, the program may crash.
         For this, the setElement parameter was created, but it must be specified
         not only in case of an increase in size, but always when calling the method
         for prevention. The programmer may not even know the current size
         of the array, therefore, he cannot know whether the array will
         be increased or decreased.
*/
/*!
\fn void ARRAYDATA<type_array>::replace(const unsigned int &position, const type_array &value)
\brief Changes the value at the specified position
\tparam type_array The type of elements that the array stores. For example int or float
\param position The position at which the value changes
\param value The value to be placed in the position
*/
/*!
\fn void ARRAYDATA<type_array>::reverse()
\brief Reverses the array
\tparam type_array The type of elements that the array stores. For example int or float
*/
/*!
\fn void ARRAYDATA<type_array>::remove()
\brief Removes an array
\tparam type_array The type of elements that the array stores. For example int or float
*/
/*!
\fn void ARRAYDATA<type_array>::respawn()
\brief The method deletes the old array, however, the memory for the new array
       is allocated the same size without filling it, unlike reset()
\tparam type_array The type of elements that the array stores. For example int or float
*/
/*!
\fn type_array ARRAYDATA<type_array>::getMin(ArrayStatus ArrStat)
\brief Optimized method for finding the minimum element
\tparam type_array The type of elements that the array stores. For example int or float
\param ArrStat Array status
\return type_array
*/
/*!
\fn type_array ARRAYDATA<type_array>::getMax(ArrayStatus ArrStat)
\brief Optimized method for finding the maximum element
\tparam type_array The type of elements that the array stores. For example int or float
\param ArrStat Array status
\return type_array
*/
/*!
\fn Array<int> *ARRAYDATA<type_array>::lenear_searcher(const type_array &required_element)
\brief Linear item search method
\details Returns all occurrences of the found value
\tparam type_array The type of elements that the array stores. For example int or float
\param required_element The value to find
\return Array<int>*
*/
/*!
\fn int ARRAYDATA<type_array>::binary_searcher(const type_array &required_element)
\brief Binary item search method
\details Returns only one position and is only used in sorted arrays. It is used to
         facilitate the programmer's work so that the method does not need to pass a bunch
         of parameters that are needed in the algorithm, but the launch is always carried
         out by passing the same values.
\tparam type_array The type of elements that the array stores. For example int or float
\param required_element The value to find
\return int
*/
/*!
\fn void ARRAYDATA<type_array>::binary_searcher(const type_array &required_element, int &number_point, int left_limit, int right_limit)
\brief Binary item search method algorithm
\details The main algorithm for binary search, which is used in the algorithm
\tparam type_array The type of elements that the array stores. For example int or float
\param required_element The value to find
\param number_point Position found element
\param left_limit Left border of the desired range
\param right_limit Right border of the desired range
*/
/*!
\fn Array<int> *ARRAYDATA<type_array>::searcherOccurrencesOfSubstring(Array<type_array> *&SUBARRAY, ArrayType ArrType)
\brief Sequence search method that returns all its occurrences
\tparam type_array The type of elements that the array stores. For example int or float
\param SUBARRAY The substring that is searched for in the main array
\param ArrType Array type
\return Array<int>*
*/
/*!
\fn type_array ARRAYDATA<type_array>::average()
\brief Method that returns the arithmetic mean of an array
\tparam type_array The type of elements that the array stores. For example int or float
\return type_array
*/
/*!
\fn type_array ARRAYDATA<type_array>::mediana()
\brief Method that returns the median of an array
\tparam type_array The type of elements that the array stores. For example int or float
\return type_array
*/
/*!
\fn type_array ARRAYDATA<type_array>::moda(int &highest_frequency)
\brief Method that returns the array mode
\tparam type_array The type of elements that the array stores. For example int or float
\param highest_frequency An indicator of the frequency of occurrence of an element that is most often found
\return type_array
*/
/*!
\fn Array<type_array> *ARRAYDATA<type_array>::modas(int &highest_frequency)
\brief A method that returns all elements with an array mode
\tparam type_array The type of elements that the array stores. For example int or float
\param highest_frequency An indicator of the frequency of occurrence of elements that are most often found
\return Array<type_array>*
*/
/*!
\fn void ARRAYDATA<type_array>::operator&&(const type_array &value)
\brief Operator adding an element to the end of an array
\tparam type_array The type of elements that the array stores. For example int or float
\param value The value to add to the end of the array
*/
/*!
\fn void ARRAYDATA<type_array>::operator!()
\brief Operator that removes an element from the end of an array
\tparam type_array The type of elements that the array stores. For example int or float
*/
/*!
\fn void ARRAYDATA<type_array>::operator||(const type_array &value)
\brief An operator that removes all elements with a specified value
\tparam type_array The type of elements that the array stores. For example int or float
\param value The value to be removed
*/
/*!
\fn void ARRAYDATA<type_array>::operator<<(ARRAYDATA<type_array> *&appendingArray)
\brief Operator for merging two arrays in the current object
\tparam type_array The type of elements that the array stores. For example int or float
\param appendingArray An array to attach from another object
*/
/*!
\fn void ARRAYDATA<type_array>::operator>>(ARRAYDATA<type_array> *&appendingArray)
\brief Operator for merging two arrays in a received object
\tparam type_array The type of elements that the array stores. For example int or float
\param appendingArray An array from another object to which the current array will be passed
*/
/*!
\fn void ARRAYDATA<type_array>::operator+(const asize_t &addSize)
\brief Operator for increasing an array by a specific size
\tparam type_array The type of elements that the array stores. For example int or float
\param addSize Parameter indicating how much to increase the array
*/
/*!
\fn void ARRAYDATA<type_array>::operator-(const asize_t &subtractSize)
\brief Operator for decreasing an array by a specific size
\tparam type_array The type of elements that the array stores. For example int or float
\param subtractSize Parameter indicating how much to reduce the array
*/
/*!
\fn void ARRAYDATA<type_array>::operator*(const asize_t &multiplySize)
\brief Operator for increasing an array by several times
\tparam type_array The type of elements that the array stores. For example int or float
\param multiplySize Parameter indicating how many times to increase the array
*/
/*!
\fn void ARRAYDATA<type_array>::operator/(const asize_t &divideSize)
\brief Operator for decreasing an array by some times
\tparam type_array The type of elements that the array stores. For example int or float
\param divideSize ÐÐ°ÑÐ°Ð¼ÐµÑÑ, ÑÐºÐ°Ð·ÑÐ²Ð°ÑÑÐ¸Ð¹, Ð²Ð¾ ÑÐºÐ¾Ð»ÑÐºÐ¾ ÑÐ°Ð· ÑÐ»ÐµÐ´ÑÐµÑ ÑÐ¼ÐµÐ½ÑÑÐ¸ÑÑ Ð¼Ð°ÑÑÐ¸Ð²
*/

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                 ALGOR_MATRIX                                *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
Matrix
*/

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                  ALGOR_HEAP                                 *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
Heap
*/

/* *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 * --------------------------------------------------------------------------- *
 *                                  ALGOR_LIST                                 *
 * --------------------------------------------------------------------------- *
 * *****/---/+++++-/%/-+-+-+-/%/-+-+-+-&&&-+-+-+-/%/-+-+-+-/%/-+++++/---/***** *
 */

/*!
List
*/