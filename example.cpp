#include <iostream>
using namespace std;

#include "sortingalgorithms.h"

const int g_arraySize = 1024;

template <typename T>
void printer(const char *printing_string, T *arr)
{
    cout << printing_string;
    SortingAlgorithms::ArrayProcessing<int>::print(arr, g_arraySize);
    cout << "\n";
}

int main()
{
    int *array = new int[g_arraySize];

    //=====================================================================================
    //=====     +++++     =====     +++++     =====     +++++     =====     +++++     =====
    //=====================================================================================

    cout << "\nСортировка вставками\n";

    //Генерирую (заполняю) массив
    SortingAlgorithms::ArrayProcessing<int>::generatedArray(array, g_arraySize, 10, 999);
    //Вывожу на экран массив
    printer<int>("Сгенерированный массив: ", array);
    //Сортирую массив
    SortingAlgorithms::InsertSort<int>::insert_sort(array, g_arraySize);
    //Вывожу на экран массив
    printer<int>("Отсортированный массив: ", array);

    //=====================================================================================
    //=====     +++++     =====     +++++     =====     +++++     =====     +++++     =====
    //=====================================================================================

    cout << "\nПузырьковая сортировка\n";

    //Генерирую (заполняю) массив
    SortingAlgorithms::ArrayProcessing<int>::generatedArray(array, g_arraySize, 1, 20);
    //Вывожу на экран массив
    printer<int>("Сгенерированный массив: ", array);
    //Сортирую массив
    SortingAlgorithms::BubbleSort<int>::bubble_sort(array, g_arraySize);
    //Вывожу на экран массив
    printer<int>("Отсортированный массив: ", array);

    //=====================================================================================
    //=====     +++++     =====     +++++     =====     +++++     =====     +++++     =====
    //=====================================================================================

    cout << "\nСортировка Шейкером\n";

    //Генерирую (заполняю) массив
    SortingAlgorithms::ArrayProcessing<int>::generatedArray(array, g_arraySize, 1, 20);
    //Вывожу на экран массив
    printer<int>("Сгенерированный массив: ", array);
    //Сортирую массив
    SortingAlgorithms::CocktailShakerSort<int>::cocktail_shaker_sort(array, g_arraySize);
    //Вывожу на экран массив
    printer<int>("Отсортированный массив: ", array);

    //=====================================================================================
    //=====     +++++     =====     +++++     =====     +++++     =====     +++++     =====
    //=====================================================================================

    cout << "\nСортировка слиянием\n";

    //Генерирую (заполняю) массив
    SortingAlgorithms::ArrayProcessing<int>::generatedArray(array, g_arraySize, 1, 20);
    //Вывожу на экран массив
    printer<int>("Сгенерированный массив: ", array);
    //Сортирую массив
    SortingAlgorithms::MergeSort<int>::merge_sort(array, 0, g_arraySize - 1);
    //Вывожу на экран массив
    printer<int>("Отсортированный массив: ", array);

    //=====================================================================================
    //=====     +++++     =====     +++++     =====     +++++     =====     +++++     =====
    //=====================================================================================

    cout << "\nСортировка Пирамидой (двоичной кучей)\n";

    //Генерирую (заполняю) массив
    SortingAlgorithms::ArrayProcessing<int>::generatedArray(array, g_arraySize, 1, 20);
    //Вывожу на экран массив
    printer<int>("Сгенерированный массив: ", array);
    //Сортирую массив
    SortingAlgorithms::HeapSort<int>::heap_sort(array, g_arraySize);
    //Вывожу на экран массив
    printer<int>("Отсортированный массив: ", array);

    //=====================================================================================
    //=====     +++++     =====     +++++     =====     +++++     =====     +++++     =====
    //=====================================================================================

    cout << "\nБыстрая сортировка\n";

    //Генерирую (заполняю) массив
    SortingAlgorithms::ArrayProcessing<int>::generatedArray(array, g_arraySize, 1, 20);
    //Вывожу на экран массив
    printer<int>("Сгенерированный массив: ", array);
    //Сортирую массив
    SortingAlgorithms::QuickSort<int>::quick_sort(array, 0, g_arraySize - 1);
    //Вывожу на экран массив
    printer<int>("Отсортированный массив: ", array);

    //=====================================================================================
    //=====     +++++     =====     +++++     =====     +++++     =====     +++++     =====
    //=====================================================================================

    cout << "\nCортировка подсчётом\n";

    //Генерирую (заполняю) массив
    SortingAlgorithms::ArrayProcessing<int>::generatedArray(array, g_arraySize, 1, 20);
    //Вывожу на экран массив
    printer<int>("Сгенерированный массив: ", array);
    //Сортирую массив
    SortingAlgorithms::CountingSort<int>::counting_sort(array, g_arraySize);
    //Вывожу на экран массив
    printer<int>("Отсортированный массив: ", array);

    //=====================================================================================
    //=====     +++++     =====     +++++     =====     +++++     =====     +++++     =====
    //=====================================================================================

    cout << "\nПоразраядная (радиальная) сортировка\n";

    //Генерирую (заполняю) массив
    SortingAlgorithms::ArrayProcessing<int>::generatedArray(array, g_arraySize, 1, 20);
    //Вывожу на экран массив
    printer<int>("Сгенерированный массив: ", array);
    //Сортирую массив
    SortingAlgorithms::RadixSort<int>::radix_sort(array, g_arraySize);
    //Вывожу на экран массив
    printer<int>("Отсортированный массив: ", array);

    //=====================================================================================
    //=====     +++++     =====     +++++     =====     +++++     =====     +++++     =====
    //=====================================================================================

    delete[] array;

    return 0;
}
